Selection sort -
Start with first element in array, compare this element with all other element make sure this element is smallest.
thereafter move to the second element in array.
THE COMPLEXITY OF SELECTION SORT IS O(N2)
IT TAKES O(1) EXTRA SPACE, IT SORTS IN PLACE
Does not perform better with nearly sorted list. not a adaptive sort.



Bubble Sort -
FOR EACH ITERATION, EVERY ELEMENT IS COMPARED WITH ITS NEIGHBOR AND SWAPPED IF THEY ARE NOT IN ORDER.
THIS RESULTS IN SMALLER ELEMENTS BUBBLING TO THE BEGINNING OF THE LIST
AT THE END OF THE FIRST ITERATION, THE SMALLEST ELEMENT IS IN THE RIGHT POSITION, AT THE END OF THE SECOND ITERATION THE SECOND SMALLEST IS IN THE RIGHT POSITION AND SO ON.
if no swap in a iteration then it means list is already sorted, it breaks the loop in this scenario

THE COMPLEXITY OF BUBBLE SORT IS O(N2)
IT TAKES O(1) EXTRA SPACE
Perform better with nearly sorted list.



Insertion sort*** -
START WITH A SORTED SUB-LIST OF SIZE 1
THIS CONTINUES TILL THE ENTIRE LIST IS SORTED.
INSERT THE NEXT ELEMENT INTO THE SORTED SUB-LIST AT THE RIGHT POSITION. NOW THE SORTED SUB-LIST HAS 2 ELEMENTS
perform better with nearly sorted list.

THE COMPLEXITY OF INSERTION SORT IS O(N2)
IT TAKES O(1) EXTRA SPACE, IT SORTS IN PLACE
IT HAS VERY LOW OVERHEAD AND IS TRADITIONALLY THE SORT OF CHOICE WHEN USED WITH FASTER ALGORITHMS WHICH FOLLOW THE DIVIDE AND CONQUER APPROACH



SHELL SORT -
SHELL SORT USES INSERTION SORT, THE ENTIRE LIST IS DIVIDED AND THOSE SUB-LISTS ARE SORTED
THE COMPLEXITY OF SHELL SORT IS BETTER THAN INSERTION SORT AS THE FINAL ITERATION WITH INCREMENT = 1 HAS TO WORK WITH A NEARLY SORTED LIST
THE COMPLEXITY OF SHELL SORT IS SOMEWHERE BETWEEN O(N) AND O(N2)
IT TAKES O(1) EXTRA SPACE, IT SORTS IN PLACE
perform better with nearly sorted list.




MERGE SORT ***-
THE COMPLEXITY OF MERGE SORT IS O(NLOGN)
IT TAKES O(N) EXTRA SPACE WHEN WE USE ARRAYS (ALL THE SMALLER LISTS WE CREATE IN THE DIVIDE PHASE)
not adaptive - do not perform better with nearly sorted array.



HEAP SORT***-
FIRST CONVERTS THE UNSORTED LIST OR ARRAY INTO A HEAP - THIS CAN BE DONE IN PLACE
USE THE HEAP TO ACCESS THE MAXIMUM ELEMENT AND PUT IT IN THE RIGHT POSITION IN THE ARRAY
THE COMPLEXITY OF MERGE SORT IS O(NLOGN)
SPACE COMPLEXITY IS O(1)
