Thread are either a daemon or non-daemon thread.
A daemon thread is a thread that does not prevent the JVM from exiting when the program finishes but the thread is still running.
By default, threads are created as non-daemon threads.
An example of a daemon thread might be the Java garbage collection, which runs even after your program finishes. Since it is considered a daemon thread, it does not stop the JVM from exiting and it can continue to do its work.

states ->
new -> created not started
runnable state -> thread executing in jvm  [thread.start -> runnable state -> code in run method executed]
waiting state -> waiting to be notified
thread.sleep -> current thread sleeps for specific time, after that it becomes runnable
blocked -> blocked waiting for a monitor to be unlocked.
time_waiting -> waiting with a time limit.
terminated -> a thread that has finished run method execution.

t1.join();  -> current thread will wait for the execution of t1 thread to be completed.

race condition -> two or more thread access same memory location (same variable) concurrently. you will get inconsistent result depending on which thread get access to variable.

synchronization is used to solve race condition. (synchronized method and block)

Every Java object is associated with a monitor, which is a mutual exclusion construct that prevents multiple threads from concurrently executing in a critical section.

Before a thread can enter a critical section it's required to lock the monitor.

If the monitor's already locked the thread is blocked until the monitor is unlocked.

When a thread locks a monitor in a multi-core multiprocessor environment, the values of the shared variables that are stored in main memory are read into the copies of these variables that are stored in the thread's working memory, also known as local memory or cache memory. This action ensures that the thread will work with the most recent values of these variables and not outdated values.

The thread proceeds to work with its copies of these shared variables. When the thread unlocks the monitor by leaving the critical section, these values are then copied into the shared variables and written back to main memory, which lets the next thread that enters the critical section access the most recent values of these variables.

thread waiting on a resource need to be notified.


dead lock situation - It's when two or more threads are blocked forever waiting for each other.


========================================================================================================================
public class ID {
   private static int counter; // initialized to 0 by default

   public static synchronized int getID()
   {
      return counter++;
   }

}

public class HelloRunnable implements Runnable{
     public void run() {
        System.out.println("Hello from "+Thread.currentThread().getName()+" "
                + "a thread created by "
                + "implementing a Runnable Interface!");
    }
}


public class HelloThread extends Thread{
     public void run() {
        System.out.println("Hello from "+Thread.currentThread().getName() + " created by " + "extending Thread class!");
    }
}

public static void main(String[] args){
         //Create a thread using a class that implements runnable
         (new Thread(new HelloRunnable())).start();

         //Create a thread using a class that extends Thread
         (new HelloThread()).start();
         //Create a runnable object
         Runnable r1 = new Runnable()
         {
             @Override
             public void run()
             {
                 //perform some work inside the thread
                 System.out.println("Hello from "+
                         Thread.currentThread().getName()
                         + " NOT USING LAMBDA");
             }
         };

         //Create a runnable object using lambda notation
         Runnable r2 = () -> System.out.println("Hello from " + Thread.currentThread().getName()+" USING LAMBDA " + "notation");

         /*Create and start a thread using the first runnable object This thread is also given a name in the arguments */
         Thread t1 = new Thread(r1, "Thread t1");
         t1.start();

         /*Create and start a second thread using the runnable object with lambda notation and not given a name */
         Thread t2 = new Thread(r2);
         t2.start();
}


========================================================================================================================

Synchronized -

public class CountdownMain {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        Countdown CD = new Countdown();
        Runnable r = () -> {
      //  synchronized(CD) {
         CD.printCount();
      //  }
    };
        Thread one = new Thread(r,"one");
        Thread two = new Thread(r,"two");
        one.start();
        two.start();
    }
}


public class Countdown {
    public void printCount() {
      try {
         for(int i = 10; i > 0; i--) {
            System.out.println("  ---   "  + i );
         }
         System.out.println("BlastOff!");
      }catch (Exception e) {
         System.out.println("Thread  interrupted.");
      }
   }
}

========================================================================================


    public static void main(String[] args) {
        //creating a pool of 5 threads
        ExecutorService executor = Executors.newFixedThreadPool(5);
        for (int i = 0; i < 10; i++) {
            Runnable worker = new WorkerThread("I'm thread " + i);
            //calling execute method of ExecutorService
            executor.execute(worker);
          }
        executor.shutdown();
        while (!executor.isTerminated()) {   }

        System.out.println("Finished all threads");
    }


========================================================================================