Array :-
Search - O(n)
ACCESS - O(1)
Insert - O(n) - add element and push all element by one cell
Delete - O(n) - delete element and replace element to fill up the gap

USE ARRAYS WHEN:
1. READ OPERATIONS NEED TO BE EXTREMELY FAST AND YOU HAVE RELATIVELY FEW UPDATES TO THE ARRAY
2. YOU REQUIRE RANDOM ACCESS TO ARRAY ELEMENTS

ARRAYS:
1. ARRAYS PROVIDE VERY QUICK LOOKUP FOR ELEMENTS AT SPECIFIC INDICES, SINCE THEY ARE IN CONTIGUOUS MEMORY LOCATIONS, WE KNOW EXACTLY WHERE IN MEMORY THE ELEMENT IS
2. NO EXTRA SPACE IS REQUIRED OTHER THAN FOR THE ACTUAL ELEMENTS WHICH MAKE UP THE ARRAY
3. ARRAYS ARE LOCATED IN CONTIGUOUS MEMORY LOCATIONS, IN ORDER TO INSERT AN ELEMENT, THE ELEMENTS TO ITâ€™S RIGHT HAVE TO MOVE OVER TO MAKE ROOM FOR IT.
   IT IS A MORE HEAVYWEIGHT OPERATION
4. ARRAY ELEMENTS HAVE TO BE MOVED IN THE CASE OF DELETION AS WELL
5. ARRAYS HAVE TO BE DECLARED UPFRONT WITH THE NUMBER OF ELEMENTS IT WILL HOLD, THE SIZE OF THE ARRAY CANNOT BE INCREASED DYNAMICALLY


Questions -
#two dimentional array -
string anagram



