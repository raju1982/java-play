A TREE IS TYPICALLY USED TO REPRESENT HIERARCHICAL INFORMATION
A TREE IS A DATA STRUCTURE WHICH IS MADE UP OF NODES. EACH NODE CAN POINT TO A NUMBER OF NODES
UNLIKE STACKS, QUEUES, LINKED LISTS ETC. THE ORDER OF THE ELEMENTS IS NOT IMPORTANT IN A TREE.


IN A BINARY TREE EACH NODE CAN HAVE 0, 1, OR 2 CHILDREN
ROOT		A NODE WITH NO PARENTS, EVERY TREE HAS EXACTLY ONE ROOT
EDGE		A LINK FROM A PARENT NODE TO A CHILD NODE
SIBLINGS	NODES AT THE SAME LEVEL IN THE TREE
LEAF		A NODE WITH NO CHILDREN

THE ROOT NODE A IS AN ANCESTOR OF EVERY NODE
EVERY NODE IS A DESCENDENT OF THE ROOT NODE
ANCESTOR 	->  PARENT NODE of your PARENT NODE
DESCENDENT 	->	CHILDREN of your CHILDREN
VISITING NODES OF A TREE IS CALLED TRAVERSING A TREE

BREADTH FIRST TRAVERSAL -
IT INVOLVES VISITING NODES AT EVERY LEVEL BEFORE MOVING ON TO THE NEXT LEVEL.
START FROM THE ROOT AND ADD IT TO A QUEUE
DEQUEUE AND PROCESS THE NODE
ADD IT’S LEFT AND THEN RIGHT CHILD TO THE QUEUE
THE NODES GET ADDED LEVEL- WISE FROM LEFT TO RIGHT TO THE QUEUE


//binary tree - breath first - node



DEPTH-FIRST TRAVERSAL

DEPTH-FIRST TRAVERSAL INVOLVES GOING RIGHT TO THE LEAF OF THE BINARY TREE FIRST BEFORE MOVING UP THE TREE
ALL DEPTH FIRST TRAVERSAL ARE MOST EFFICIENTLY AND INTUITIVELY IMPLEMENTED USING RECURSION

PRE-ORDER TRAVERSAL
EACH NODE IS PROCESSED FIRST (PRE) BEFORE IT’S RIGHT AND LEFT SUBTREES
THE LEFT SUB-TREES ARE PROCESSED TO THE LEAF BEFORE THE RIGHT SUBTREES

//binary tree - PRE-ORDER TRAVERSAL - node


IN-ORDER TRAVERSAL
THE LEFT SUBTREE IS PROCESSED TO THE LEAF FIRST, THEN THE NODE, THEN THE RIGHT SUBTREE

POST-ORDER TRAVERSAL
BOTH SUBTREES ARE PROCESSED BEFORE THE NODE ITSELF. THE NODE IS PROCESSED AFTER (POST) THE SUBTREES
LEFT SUBTREE -> RIGHT SUBTREE -> NODE








